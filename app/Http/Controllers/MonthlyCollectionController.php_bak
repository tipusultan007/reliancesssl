<?php

namespace App\Http\Controllers;

use App\Models\Due;
use App\Models\MonthlyCollection;
use App\Models\MonthlyLoan;
use App\Models\MonthlySaving;
use App\Models\Transaction;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Str;

class MonthlyCollectionController extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        return view('monthlyCollections.index');
    }
    public function dataCollections(Request $request)
    {
        $totalData = MonthlyCollection::count();

        $totalFiltered = $totalData;

        $limit = $request->input('length');
        $start = $request->input('start');
        //$order = $columns[$request->input('order.0.column')];
        //$dir = $request->input('order.0.dir');

        if(empty($request->input('search.value')))
        {
            $posts = MonthlyCollection::with('member')
                ->offset($start)
                ->limit($limit)
                ->orderBy('date','desc')
                ->get();
        }
        else {
            $search = $request->input('search.value');

            $posts =  MonthlyCollection::with('member')
                ->where('account_no','LIKE',"%{$search}%")
                ->offset($start)
                ->limit($limit)
                ->orderBy('date','desc')
                ->get();

            $totalFiltered = DailyCollection::where('account_no','LIKE',"%{$search}%")->count();
        }

        $data = array();
        if(!empty($posts))
        {
            foreach ($posts as $post)
            {
                //  $show =  route('daily-collections.show',$post->id);
                // $edit =  route('daily-collections.edit',$post->id);

                $nestedData['id'] = $post->id;
                $nestedData['name'] = $post->member->name;
                $nestedData['account_no'] = $post->account_no;
                $nestedData['monthly_amount'] = $post->monthly_amount;
                $nestedData['monthly_interest'] = $post->monthly_interest;
                $nestedData['loan_installment'] = $post->loan_installment;
                $nestedData['balance'] = $post->balance;
                $nestedData['late_fee'] = $post->late_fee;
                $nestedData['due'] = $post->due;
                $nestedData['due_return'] = $post->due_return;
                $nestedData['loan_id'] = $post->loan_id;
                $nestedData['date'] = date('d/m/Y',strtotime($post->date));
                $nestedData['action'] = '<div class="dropdown float-end text-muted">
                                                    <a href="#" class="dropdown-toggle arrow-none card-drop" data-bs-toggle="dropdown" aria-expanded="false">
                                                        <i class="mdi mdi-dots-horizontal"></i>
                                                    </a>
                                                    <div class="dropdown-menu dropdown-menu-end" style="">
                                                        <!-- item-->
                                                        <a href="javascript:void(0);" data-id="'.$post->id.'" class="dropdown-item view">বিস্তারিত</a>
                                                        <a href="javascript:void(0);" data-id="'.$post->id.'" class="dropdown-item edit">সম্পাদন করুন</a>
                                                        <a href="javascript:void(0);" data-id="'.$post->id.'" onclick="deleteConfirmation('.$post->id.')" class="dropdown-item delete"> ডিলেট করুন</a>
                                                    </div>
                                                </div>';
                $data[] = $nestedData;

            }
        }

        $json_data = array(
            "draw"            => intval($request->input('draw')),
            "recordsTotal"    => intval($totalData),
            "recordsFiltered" => intval($totalFiltered),
            "data"            => $data
        );

        echo json_encode($json_data);

    }

    public function dataCollectionsByAccount(Request $request)
    {
        $totalData = MonthlyCollection::where('account_no',$request->account_no)->count();

        $totalFiltered = $totalData;

        $limit = $request->input('length');
        $start = $request->input('start');
        //$order = $columns[$request->input('order.0.column')];
        //$dir = $request->input('order.0.dir');

        if(empty($request->input('search.value')))
        {
            $posts = MonthlyCollection::with('member')
                ->where('account_no',$request->account_no)
                ->offset($start)
                ->limit($limit)
                ->orderBy('date','desc')
                ->get();
        }

        $data = array();
        if(!empty($posts))
        {
            foreach ($posts as $post)
            {
                //  $show =  route('daily-collections.show',$post->id);
                // $edit =  route('daily-collections.edit',$post->id);

                $nestedData['id'] = $post->id;
                $nestedData['name'] = $post->member->name;
                $nestedData['account_no'] = $post->account_no;
                $nestedData['monthly_amount'] = $post->monthly_amount;
                $nestedData['monthly_interest'] = $post->monthly_interest;
                $nestedData['loan_installment'] = $post->loan_installment;
                $nestedData['balance'] = $post->balance;
                $nestedData['late_fee'] = $post->late_fee;
                $nestedData['due'] = $post->due;
                $nestedData['due_return'] = $post->due_return;
                $nestedData['loan_id'] = $post->loan_id;
                $nestedData['date'] = date('d/m/Y',strtotime($post->date));
                $nestedData['action'] = '<div class="dropdown float-end text-muted">
                                                    <a href="#" class="dropdown-toggle arrow-none card-drop" data-bs-toggle="dropdown" aria-expanded="false">
                                                        <i class="mdi mdi-dots-horizontal"></i>
                                                    </a>
                                                    <div class="dropdown-menu dropdown-menu-end" style="">
                                                        <!-- item-->
                                                        <a href="javascript:void(0);" data-id="'.$post->id.'" class="dropdown-item view">বিস্তারিত</a>
                                                        <a href="javascript:void(0);" data-id="'.$post->id.'" class="dropdown-item edit">সম্পাদন করুন</a>
                                                        <a href="javascript:void(0);" data-id="'.$post->id.'" onclick="deleteConfirmation('.$post->id.')" class="dropdown-item delete"> ডিলেট করুন</a>
                                                    </div>
                                                </div>';
                $data[] = $nestedData;

            }
        }

        $json_data = array(
            "draw"            => intval($request->input('draw')),
            "recordsTotal"    => intval($totalData),
            "recordsFiltered" => intval($totalFiltered),
            "data"            => $data
        );

        echo json_encode($json_data);

    }
    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        //
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        $data = $request->all();
        $saving = MonthlySaving::where('account_no',$data['account_no'])->first();
        $data['member_id'] = $saving->member_id;
        $data['monthly_saving_id'] = $saving->id;
        $data['user_id'] = Auth::id();
        $data['trx_id'] = Str::uuid();

        if (empty($request->input('monthly_installments'))
            && empty($request->input('interest_installments'))
            && empty($request->input('loan_installment'))
            && empty($request->input('due_return'))
        )
        {
            return "empty";
        }else{
            $collection = MonthlyCollection::create($data);
            if ($collection->monthly_installments>0)
            {
                $saving->deposit += $collection->monthly_amount;
                $saving->total += $collection->monthly_amount;
                $saving->save();

                Transaction::create([
                    'transaction_category_id' => 3,
                    'date' => $collection->date,
                    'trx_id' => $collection->trx_id,
                    'amount' => $collection->monthly_amount,
                    'account_no' => $collection->account_no,
                    'member_id' => $collection->member_id,
                    'user_id' => $collection->user_id,
                    'type' => 'debit',
                ]);
            }

            if ($collection->loan_installment>0)
            {
                $loan = MonthlyLoan::where('account_no',$collection->account_no)->where('status','active')->first();
                if ($loan) {
                    $loan->balance -= $collection->loan_installment;
                    $loan->paid_loan += $collection->loan_installment;
                    $loan->save();
                    Transaction::create([
                        'transaction_category_id' => 9,
                        'date' => $collection->date,
                        'loan_id' => $collection->loan_id,
                        'trx_id' => $collection->trx_id,
                        'amount' => $collection->loan_installment,
                        'account_no' => $collection->account_no,
                        'member_id' => $collection->member_id,
                        'user_id' => $collection->user_id,
                        'type' => 'debit',
                    ]);

                    $collection->loan_id = $loan->id;
                    $collection->balance = $loan->balance;
                    $collection->save();
                }

            }
            if ($collection->interest_installments>0)
            {
                $loan = MonthlyLoan::where('account_no',$collection->account_no)->where('status','active')->first();
                if ($loan) {
                    Transaction::create([
                        'transaction_category_id' => 10,
                        'date' => $collection->date,
                        'trx_id' => $collection->trx_id,
                        'loan_id' => $collection->loan_id,
                        'amount' => $collection->monthly_interest,
                        'account_no' => $collection->account_no,
                        'member_id' => $collection->member_id,
                        'user_id' => $collection->user_id,
                        'type' => 'debit',
                    ]);
                    $collection->loan_id = $loan->id;
                    $collection->balance = $loan->balance;
                    $collection->save();

                    $loan->paid_interest += $collection->monthly_interest;
                    $loan->save();
                }
            }
            if ($collection->extra_interest>0)
            {
                Transaction::create([
                    'transaction_category_id' => 16,
                    'date' => $collection->date,
                    'trx_id' => $collection->trx_id,
                    'loan_id' => $collection->loan_id,
                    'amount' => $collection->extra_interest,
                    'account_no' => $collection->account_no,
                    'member_id' => $collection->member_id,
                    'user_id' => $collection->user_id,
                    'type' => 'debit',
                ]);
            }
            if ($collection->due>0)
            {
                $due = Due::where('account_no',$collection->account_no)->where('remain','>',0)->first();
                if ($due) {
                    $due->due += $collection->due;
                    $due->remain += $collection->due;
                    $due->save();

                    Transaction::create([
                        'transaction_category_id' => 12,
                        'date' => $collection->date,
                        'trx_id' => $collection->trx_id,
                        'amount' => $collection->due_return,
                        'account_no' => $collection->account_no,
                        'member_id' => $collection->member_id,
                        'user_id' => $collection->user_id,
                        'type' => 'credit',
                    ]);

                }else{
                    Due::create([
                        'member_id' => $collection->member_id,
                        'account_no' => $collection->account_no,
                        'due' => $collection->due,
                        'remain' => $collection->due
                    ]);
                    Transaction::create([
                        'transaction_category_id' => 12,
                        'date' => $collection->date,
                        'trx_id' => $collection->trx_id,
                        'amount' => $collection->due,
                        'account_no' => $collection->account_no,
                        'member_id' => $collection->member_id,
                        'user_id' => $collection->user_id,
                        'type' => 'credit',
                    ]);
                }
            }
            if ($collection->due_return>0)
            {
                $due = Due::where('account_no',$collection->account_no)->where('remain','>',0)->first();
                $due->remain -= $collection->due_return;
                $due->save();
                Transaction::create([
                    'transaction_category_id' => 13,
                    'date' => $collection->date,
                    'trx_id' => $collection->trx_id,
                    'amount' => $collection->due_return,
                    'account_no' => $collection->account_no,
                    'member_id' => $collection->member_id,
                    'user_id' => $collection->user_id,
                    'type' => 'debit',
                ]);
            }
            if ($collection->late_fee>0)
            {

                Transaction::create([
                    'transaction_category_id' => 11,
                    'date' => $collection->date,
                    'trx_id' => $collection->trx_id,
                    'amount' => $collection->late_fee,
                    'account_no' => $collection->account_no,
                    'member_id' => $collection->member_id,
                    'user_id' => $collection->user_id,
                    'type' => 'debit',
                ]);
            }
        }

        return json_encode('success');
    }

    /**
     * Display the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
        //
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {
        //
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {
        $data = $request->all();
        $saving = MonthlySaving::where('account_no',$data['account_no'])->first();
        $data['member_id'] = $saving->member_id;
        $data['monthly_saving_id'] = $saving->id;
        $data['user_id'] = Auth::id();
        $temp = MonthlyCollection::find($id);

        if (empty($request->input('monthly_installments'))
            && empty($request->input('interest_installments'))
            && empty($request->input('loan_installment'))
            && empty($request->input('due_return'))
        )
        {
            return "empty";
        }else{
            $collection = MonthlyCollection::find($id);
            $collection->update($data);
            if ($temp->monthly_installments>0 || $collection->monthly_installments>0)
            {
                $transaction = Transaction::where('transaction_category_id',3)->where('trx_id',$collection->trx_id)->first();
                if ($temp->monthly_installments>0)
                {
                    $saving->deposit -= $temp->monthly_amount;
                    $saving->total -= $temp->monthly_amount;
                    $saving->save();
                }
                if ($collection->monthly_installments>0) {
                    $saving->deposit += $collection->monthly_amount;
                    $saving->total += $collection->monthly_amount;
                    $saving->save();
                    if ($transaction) {
                        $transaction->amount = $collection->monthly_amount;
                        $transaction->date = $collection->date;
                        $transaction->save();
                    } else {
                        Transaction::create([
                            'transaction_category_id' => 3,
                            'date' => $collection->date,
                            'trx_id' => $collection->trx_id,
                            'amount' => $collection->monthly_amount,
                            'account_no' => $collection->account_no,
                            'member_id' => $collection->member_id,
                            'user_id' => $collection->user_id,
                            'type' => 'debit',
                        ]);
                    }
                }else{
                    $transaction->delete();
                }

            }

            if ($temp->loan_installment>0 || $collection->loan_installment>0)
            {
                $loan = MonthlyLoan::where('account_no',$collection->account_no)->where('status','active')->first();
                if ($loan) {
                    $transaction = Transaction::where('transaction_category_id',9)->where('trx_id',$collection->trx_id)->first();
                    if ($temp->loan_installment>0) {
                        $loan->balance += $temp->loan_installment;
                        $loan->paid_loan -= $temp->loan_installment;
                        $loan->save();
                    }
                    if ($collection->loan_installment>0) {
                        $loan->balance -= $collection->loan_installment;
                        $loan->paid_loan += $collection->loan_installment;
                        $loan->save();
                        if ($transaction) {
                            $transaction->amount = $collection->loan_installment;
                            $transaction->date = $collection->date;
                            $transaction->save();
                        }else{
                            Transaction::create([
                                'transaction_category_id' => 9,
                                'date' => $collection->date,
                                'loan_id' => $collection->loan_id,
                                'trx_id' => $collection->trx_id,
                                'amount' => $collection->loan_installment,
                                'account_no' => $collection->account_no,
                                'member_id' => $collection->member_id,
                                'user_id' => $collection->user_id,
                                'type' => 'debit',
                            ]);
                        }
                    }else{
                        $transaction->delete();
                    }
                    $collection->loan_id = $loan->id;
                    $collection->balance = $loan->balance;
                    $collection->save();
                }

            }
            if ($temp->interest_installments>0 || $collection->interest_installments>0)
            {
                $loan = MonthlyLoan::where('account_no',$collection->account_no)->where('status','active')->first();
                if ($loan) {
                    if ($temp->interest_installments>0) {
                        $loan->paid_interest -= $temp->monthly_interest;
                        $loan->save();
                    }

                    $transaction = Transaction::where('transaction_category_id',10)->where('trx_id',$collection->trx_id)->first();
                    $collection->loan_id = $loan->id;
                    $collection->balance = $loan->balance;
                    $collection->save();

                    if ($collection->interest_installments>0) {
                        $loan->paid_interest += $collection->monthly_interest;
                        $loan->save();
                        if ($transaction){
                            $transaction->amount = $collection->monthly_interest;
                            $transaction->date = $collection->date;
                            $transaction->save();
                        }else{
                            Transaction::create([
                                'transaction_category_id' => 10,
                                'date' => $collection->date,
                                'trx_id' => $collection->trx_id,
                                'loan_id' => $collection->loan_id,
                                'amount' => $collection->monthly_interest,
                                'account_no' => $collection->account_no,
                                'member_id' => $collection->member_id,
                                'user_id' => $collection->user_id,
                                'type' => 'debit',
                            ]);
                        }
                    }else{
                        $transaction->delete();
                    }
                }
            }
            if ($temp->extra_interest>0 || $collection->extra_interest>0)
            {
                $transaction = Transaction::where('transaction_category_id',16)->where('trx_id',$collection->trx_id)->first();
                if ($collection->extra_interest>0) {
                    if ($transaction) {
                        $transaction->amount = $collection->extra_interest;
                        $transaction->date = $collection->date;
                        $transaction->save();
                    } else {
                        Transaction::create([
                            'transaction_category_id' => 16,
                            'date' => $collection->date,
                            'trx_id' => $collection->trx_id,
                            'loan_id' => $collection->loan_id,
                            'amount' => $collection->extra_interest,
                            'account_no' => $collection->account_no,
                            'member_id' => $collection->member_id,
                            'user_id' => $collection->user_id,
                            'type' => 'debit',
                        ]);
                    }
                }else{
                    $transaction->delete();
                }

            }
            if ($temp->due>0 || $collection->due>0)
            {
                $due = Due::where('account_no',$collection->account_no)->where('remain','>',0)->first();
                $transaction = Transaction::where('transaction_category_id',12)->where('trx_id',$collection->trx_id)->first();
                if ($temp->due>0) {
                        $due->due -= $temp->due;
                        $due->remain -= $temp->due;
                        $due->save();
                    }
                if ($collection->due>0) {
                    if ($due) {
                        $due->due += $collection->due;
                        $due->remain += $collection->due;
                        $due->save();
                        if ($transaction){
                            $transaction->amount = $collection->due;
                            $transaction->date = $collection->date;
                            $transaction->save();
                        }else{
                            Transaction::create([
                                'transaction_category_id' => 12,
                                'date' => $collection->date,
                                'trx_id' => $collection->trx_id,
                                'amount' => $collection->due,
                                'account_no' => $collection->account_no,
                                'member_id' => $collection->member_id,
                                'user_id' => $collection->user_id,
                                'type' => 'credit',
                            ]);
                        }
                    }else{
                        Due::create([
                            'member_id' => $collection->member_id,
                            'account_no' => $collection->account_no,
                            'due' => $collection->due,
                            'remain' => $collection->due
                        ]);
                        Transaction::create([
                            'transaction_category_id' => 12,
                            'date' => $collection->date,
                            'trx_id' => $collection->trx_id,
                            'amount' => $collection->due,
                            'account_no' => $collection->account_no,
                            'member_id' => $collection->member_id,
                            'user_id' => $collection->user_id,
                            'type' => 'credit',
                        ]);
                    }
                }else{
                    $transaction->delete();
                }

            }
            if ($temp->due_return>0 || $collection->due_return>0)
            {
                $due = Due::where('account_no',$collection->account_no)->first();
                $transaction = Transaction::where('transaction_category_id',13)->where('trx_id',$collection->trx_id)->first();
                if ($temp->due_return>0) {
                    $due->remain += $temp->due_return;
                    $due->save();
                }

                if ($collection->due_return>0)
                {
                    $due->remain -= $collection->due_return;
                    $due->save();

                    if ($transaction){
                        $transaction->amount = $collection->due_return;
                        $transaction->date = $collection->date;
                        $transaction->save();
                    }else{
                        Transaction::create([
                            'transaction_category_id' => 13,
                            'date' => $collection->date,
                            'trx_id' => $collection->trx_id,
                            'amount' => $collection->due_return,
                            'account_no' => $collection->account_no,
                            'member_id' => $collection->member_id,
                            'user_id' => $collection->user_id,
                            'type' => 'debit',
                        ]);
                    }
                }else{
                    $transaction->delete();
                }


            }

            if ($temp->late_fee>0 || $collection->late_fee>0 )
            {
                $transaction = Transaction::where('transaction_category_id',11)->where('trx_id',$collection->trx_id)->first();
                if ($collection->late_fee>0) {
                    if ($transaction) {
                        $transaction->amount = $collection->late_fee;
                        $transaction->date = $collection->date;
                        $transaction->save();
                    } else {
                        Transaction::create([
                            'transaction_category_id' => 11,
                            'date' => $collection->date,
                            'trx_id' => $collection->trx_id,
                            'amount' => $collection->late_fee,
                            'account_no' => $collection->account_no,
                            'member_id' => $collection->member_id,
                            'user_id' => $collection->user_id,
                            'type' => 'debit',
                        ]);
                    }
                }
            }
        }

        return json_encode($collection);
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        $collection = MonthlyCollection::find($id);
        if ($collection->monthly_amount>0)
        {
            $saving = MonthlySaving::where('account_no',$collection->account_no)->first();
            $saving->deposit -= $collection->monthly_amount;
            $saving->total -= $collection->monthly_amount;
            $saving->save();
        }

        if ($collection->loan_installment>0)
        {
            $loan = MonthlyLoan::find($collection->loan_id);
            $loan->balance += $collection->loan_installment;
            $loan->save();
        }
        if ($collection->due>0)
        {
            $due = Due::where('account_no',$collection->account_no)->first();
            if ($due)
            {
                $due->due -= $collection->due;
                $due->remain -= $collection->due;
                $due->save();
            }
        }
        if ($collection->due_return>0)
        {
            $due = Due::where('account_no',$collection->account_no)->first();
            if ($due)
            {
                $due->remain += $collection->due_return;
                $due->save();
            }
        }
        $transaction = Transaction::where('trx_id',$collection->trx_id)->delete();
        $delete = MonthlyCollection::destroy($id);

        // check data deleted or not
        if ($delete == 1) {
            $success = true;
            $message = "Data deleted successfully";
        } else {
            $success = false;
            $message = "Data not found";
        }

        //  return response
        return response()->json([
            'success' => $success,
            'message' => $message,
        ]);
    }

    public function getDetailsMonthly($id)
    {
        $collections = MonthlyCollection::with('member','monthlySaving')->find($id);
        //$monthly = MonthlySaving::where('account_no',$collections->account_no)->first();
        $loan = MonthlyLoan::where('account_no',$collections->account_no)->where('status','active')->latest()->first();
        $data['collection'] = $collections;
        $data['detail'] = getMonthlyInstallment($collections->account_no,$collections->date);
        return json_encode($data);
    }
}
